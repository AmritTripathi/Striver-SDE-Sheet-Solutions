LinkedListNode<int> *getMid(LinkedListNode<int> *head)
{
    LinkedListNode<int> *slow = head;
    LinkedListNode<int> *fast = head->next;
    while(fast!=NULL && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

LinkedListNode<int> *reverse(LinkedListNode<int> *head)
{
    if(head->next==NULL) return head;
    LinkedListNode<int> *prev = NULL;
    LinkedListNode<int> *curr = head;
    LinkedListNode<int> *last = NULL;
    
    while(curr!=NULL)
    {
        last = curr->next;
        curr->next = prev;
        prev = curr;
        curr = last;
    }
    
    return prev;
}

bool isPalindrome(LinkedListNode<int> *head) {
    if(head==NULL || head->next==NULL) return true;
    LinkedListNode<int> *mid = getMid(head);
    mid->next = reverse(mid->next);
    LinkedListNode<int> *head1 = head;
    LinkedListNode<int> *head2 = mid->next;
    
    while(head2!=NULL)
    {
        if(head1->data!=head2->data) return false;
        head1 = head1->next;
        head2 = head2->next;
    }
    
    return true;
}