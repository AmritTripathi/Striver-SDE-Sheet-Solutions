#include <bits/stdc++.h> 
long getTrappedWater(long *arr, int n){
    long *left = new long[n];
    left[0]=arr[0];
    long *right = new long[n];
    right[n-1]=arr[n-1];
    for(int i=1; i<n; i++) left[i] = max(arr[i], left[i-1]);
    for(int i=n-2; i>=0; i--) right[i] = max(arr[i], right[i+1]);
    long ans = 0;
    for(int i=0; i<n; i++) ans += min(left[i], right[i]) - arr[i];
    return ans;
}

//////////////////////////////////////////////////////////////////////////////////////

#include <bits/stdc++.h> 
long getTrappedWater(long *arr, int n){
    int l=0, r=n-1;
    long leftMax=0, rightMax=0, res=0;
    while(l<=r)
    {
        if(arr[l]<=arr[r])
        {
            if(arr[l]>=leftMax) leftMax = arr[l++];
            else res+=(leftMax-arr[l++]);
        }
        else
        {
            if(arr[r]>=rightMax) rightMax = arr[r--];
            else res+=(rightMax-arr[r--]);
        }
    }
    return res;
}

///////////////////////////////////////////////////////////////////////////////////////

#include <bits/stdc++.h> 
long getTrappedWater(long *arr, int n){
    int l=0, r=n-1;
    long leftMax=0, rightMax=0, res=0;
    while(l<=r)
    {
        leftMax = max(leftMax, arr[l]);
        rightMax = max(rightMax, arr[r]);
        if(arr[l]<=arr[r]) res+=(leftMax-arr[l++]);
        else res+=(rightMax-arr[r--]);
    }
    return res;
}