LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    if(head==NULL) return head;
    unordered_map<LinkedListNode<int> *, LinkedListNode<int> *> oldToNew;
    LinkedListNode<int> *temp = head;
    while(temp!=NULL)
    {
        LinkedListNode<int> *newNode = new LinkedListNode<int>(temp->data);
        oldToNew[temp] = newNode;
        temp = temp->next;
    }
    temp = head;
    while(temp!=NULL)
    {
        oldToNew[temp]->next = oldToNew[temp->next];
        oldToNew[temp]->random = oldToNew[temp->random];
        temp = temp->next;
    }
    return oldToNew[head];
}

////////////////////////////////////////////////////////////////////////////////////////////

void insertAtTail(LinkedListNode<int> *&head, LinkedListNode<int> *&tail, int d)
{
    LinkedListNode<int> *newNode = new LinkedListNode<int>(d);
    if(head==NULL)
    {
        head = newNode;
        tail = newNode;
    }
    else
    {
        tail->next = newNode;
        tail = newNode;
    }
}

LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    LinkedListNode<int> *cloneHead = NULL;
    LinkedListNode<int> *cloneTail = NULL;
    LinkedListNode<int> *temp = head;
    
    while(temp!=NULL)
    {
        insertAtTail(cloneHead, cloneTail, temp->data);
        temp = temp->next;
    }
    LinkedListNode<int> *originalNode = head;
    LinkedListNode<int> *cloneNode = cloneHead;
    while(originalNode!=NULL && cloneNode!=NULL)
    {
        LinkedListNode<int> *next = originalNode->next;
        originalNode->next = cloneNode;
        originalNode = next;
        
        next = cloneNode->next;
        cloneNode->next = originalNode;
        cloneNode = next;
    }
    temp = head;
    while(temp!=NULL)
    {
        if(temp->next!=NULL)
        {
            temp->next->random = temp->random ? temp->random->next : temp->random;
        }
        temp = temp->next->next;
    }
    originalNode = head;
    cloneNode = cloneHead;
    while(originalNode!=NULL && cloneNode!=NULL)
    {
        originalNode->next = cloneNode->next;
        originalNode = originalNode->next;
        if(originalNode!=NULL) cloneNode->next = originalNode->next;
        cloneNode = cloneNode->next;
    }
    return cloneHead;
}
